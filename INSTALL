Licence:	GPL3
Author:		Richard Neher, Fabio Zanini
Date:		2012/09/12

Description:
------------
Intallation instructions and troubleshooting for the FFPopSim library.

This file is made of three parts:

   1. Requirements
   2. Installation instructions
   3. Troubleshooting

-------------------------------------------------------------------
1. REQUIREMENTS
-------------------------------------------------------------------
Make is used to build the FFPopSim library. The pure C++ part
requires:

- a C++ compiler and linker
- the GNU Scientific Library (http://www.gnu.org/software/gsl/)
- BOOST (http://www.boost.org/)

The python wrapper requires, *in addition the the aforementioned*:

- Python 2.7
- Distutils (http://docs.python.org/library/distutils.html)
- NumPy, SciPy, and MatPlotLib (http://www.scipy.org)

Optional dependencies
-------------------------------------------------------------------
The C wrapper for Python, in case you want to regenerate it, requires:

- SWIG (http://www.swig.org)

The C++ documentation, in case you want to rebuild it, requires:

- Doxygen (http://www.doxygen.org/)

The Python documentation, in case you want to rebuild it, requires:

- Sphinx (http://sphinx.pocoo.org/)

-------------------------------------------------------------------
2. INSTALLATION INSTRUCTIONS
-------------------------------------------------------------------
For the impatient ones, call

	make

and have a look in the pkg folder.

Full instructions
-------------------------------------------------------------------
Open the Makefile and have a look at the first few lines. Set the
required variables in the Makefile according to your platform (C/C++
compiler, Python interpreter, etc.) and preferences (optimization
level, compiler flags).

The variable CXXFLAGS can be used to add the paths for include files
for GSL and BOOST.

If you are compiling the Python part of FFPopSim, open also setup.py
and modify the 'includes' and 'library_dirs' lists there if GSL or
BOOST are not found.

You can build the various pieces separately:

- To build only the C++ sources, call

	make src

- To build the C++ test programs, call

	make tests

- To build the Python bindings, call

	make python

- To install the Python extension system-wide, call

	make python-install

  *as superuser*

- To rebuild the C++ documentation, call

	make doc

- To rebuild the Python documentation, call

	make python-doc

- To build both the C++ and Python parts (no documentation), just call

	make

- Finally, to rebuild everything including documentation, call

	make all

The C++ library and the Python module files are stored in the pkg
folder. Copy them into your system folders (e.g., /usr/local/include,
/usr/local/lib and /usr/local/lib/python2.7/site-packages,
respectively) to make them available to all users.

Documentation and examples
-------------------------------------------------------------------
Documentation and examples are online at:

	http://webdav.tuebingen.mpg.de/ffpopsim/

C++ and Python examples are available in the tests and examples
folders. They are commented, so you should be able to understand
what is being done there by reading the code directly.

-------------------------------------------------------------------
3. TROUBLESHOOTING
-------------------------------------------------------------------
Q. I cannot compile the C++ library because BOOST is not found, but
   I am sure it's installed!

A. BOOST is probably installed in a folder where your compiler cannot
   find it. This is for instance the case if you are on a Mac and
   installed it via Macports. There are two solutions: you either
   tell your compiler where your headers are via the CXXFLAGS variable
   in the Makefile; or you symlink your header folder, e.g.:

   sudo ln -s /opt/local/include /usr/local/include

   The latter solution is discouraged and should be avoided if
   possible.


Q. I cannot compile the Python bindings. The compiler complains that
   a number of gsl-related or boost-related files are not found!

A. Try opening the setup.py file and extend the lists 'includes' and
   'library_dirs'. In particular, add the paths of the header files 
   for GSL and BOOST on your system to 'includes', and the shared
   library files for GSL to 'library_dirs'.


Q. The examples work, but when I try to import FFPopSim from another
   Python script I get in ImportError message!

A. In order for Python to find FFPopSim, both FFPopsim.py and
   _FFPopSim.so must be in your PYTHONPATH. A cheap way of achieving
   this on a case-by-case basis is to write at the beginning of the
   script:

   import sys
   sys.path.append('<FFPOPSIM>/pkg/python')

   where <FFPOPSIM> is the folder in which FFPopSim was compiled. A
   more elegant solution is to install the library system-wide, using
   
   make python-install

   Note that you will be asked root priviledges for this operation.
