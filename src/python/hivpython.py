# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
Model for an HIV population.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hivpython', [dirname(__file__)])
        except ImportError:
            import _hivpython
            return _hivpython
        if fp is not None:
            try:
                _mod = imp.load_module('_hivpython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hivpython = swig_import_helper()
    del swig_import_helper
else:
    import _hivpython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class stat_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mean = _swig_property(_hivpython.stat_t_mean_get, _hivpython.stat_t_mean_set)
    variance = _swig_property(_hivpython.stat_t_variance_get, _hivpython.stat_t_variance_set)
    def __init__(self): 
        this = _hivpython.new_stat_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hivpython.delete_stat_t
    __del__ = lambda self : None;
stat_t_swigregister = _hivpython.stat_t_swigregister
stat_t_swigregister(stat_t)

class hypercube_function(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    dim = _swig_property(_hivpython.hypercube_function_dim_get, _hivpython.hypercube_function_dim_set)
    hypercube_mean = _swig_property(_hivpython.hypercube_function_hypercube_mean_get, _hivpython.hypercube_function_hypercube_mean_set)
    coefficients_single_locus = _swig_property(_hivpython.hypercube_function_coefficients_single_locus_get, _hivpython.hypercube_function_coefficients_single_locus_set)
    coefficients_epistasis = _swig_property(_hivpython.hypercube_function_coefficients_epistasis_get, _hivpython.hypercube_function_coefficients_epistasis_set)
    epistatic_std = _swig_property(_hivpython.hypercube_function_epistatic_std_get, _hivpython.hypercube_function_epistatic_std_set)
    rng_offset = _swig_property(_hivpython.hypercube_function_rng_offset_get, _hivpython.hypercube_function_rng_offset_set)
    def __init__(self, *args): 
        this = _hivpython.new_hypercube_function(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hivpython.delete_hypercube_function
    __del__ = lambda self : None;
    def set_up(self, *args): return _hivpython.hypercube_function_set_up(self, *args)
    def get_seed(self): return _hivpython.hypercube_function_get_seed(self)
    def get_func(self, *args): return _hivpython.hypercube_function_get_func(self, *args)
    def get_additive_coefficient(self, *args): return _hivpython.hypercube_function_get_additive_coefficient(self, *args)
    def set_additive_coefficient(self, *args): return _hivpython.hypercube_function_set_additive_coefficient(self, *args)
    def add_coefficient(self, *args): return _hivpython.hypercube_function_add_coefficient(self, *args)
    def set_random_epistasis_strength(self, *args): return _hivpython.hypercube_function_set_random_epistasis_strength(self, *args)
hypercube_function_swigregister = _hivpython.hypercube_function_swigregister
hypercube_function_swigregister(hypercube_function)

class clone_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _genotype = _swig_property(_hivpython.clone_t__genotype_get, _hivpython.clone_t__genotype_set)
    _trait = _swig_property(_hivpython.clone_t__trait_get, _hivpython.clone_t__trait_set)
    fitness = _swig_property(_hivpython.clone_t_fitness_get, _hivpython.clone_t_fitness_set)
    clone_size = _swig_property(_hivpython.clone_t_clone_size_get, _hivpython.clone_t_clone_size_set)
    def __init__(self, *args): 
        this = _hivpython.new_clone_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_number_of_traits(self): return _hivpython.clone_t_get_number_of_traits(self)
    def _get_trait(self, *args): return _hivpython.clone_t__get_trait(self, *args)
    def _get_genotype(self): return _hivpython.clone_t__get_genotype(self)
    def _set_genotype(self, *args): return _hivpython.clone_t__set_genotype(self, *args)
    @property
    def trait(self):
        return self._get_trait(self.get_number_of_traits())

    @property
    def genotype(self):
            return self._get_genotype()
    @genotype.setter
    def genotype(self, seq):
            if len(seq) != HIVGENOME:
                    raise TypeError('The genotype must have the right length.')
            self._set_genotype(seq)

    __swig_destroy__ = _hivpython.delete_clone_t
    __del__ = lambda self : None;
clone_t_swigregister = _hivpython.clone_t_swigregister
clone_t_swigregister(clone_t)

class haploid_clone(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def get_generation(self): return _hivpython.haploid_clone_get_generation(self)
    def get_number_of_loci(self): return _hivpython.haploid_clone_get_number_of_loci(self)
    def get_pop_size(self): return _hivpython.haploid_clone_get_pop_size(self)
    def get_number_of_clones(self): return _hivpython.haploid_clone_get_number_of_clones(self)
    def bottleneck(self, *args): return _hivpython.haploid_clone_bottleneck(self, *args)
    target_pop_size = _swig_property(_hivpython.haploid_clone_target_pop_size_get, _hivpython.haploid_clone_target_pop_size_set)
    mutation_rate = _swig_property(_hivpython.haploid_clone_mutation_rate_get, _hivpython.haploid_clone_mutation_rate_set)
    outcrossing_probability = _swig_property(_hivpython.haploid_clone_outcrossing_probability_get, _hivpython.haploid_clone_outcrossing_probability_set)
    crossover_rate = _swig_property(_hivpython.haploid_clone_crossover_rate_get, _hivpython.haploid_clone_crossover_rate_set)
    recombination_model = _swig_property(_hivpython.haploid_clone_recombination_model_get, _hivpython.haploid_clone_recombination_model_set)
    circular = _swig_property(_hivpython.haploid_clone_circular_get, _hivpython.haploid_clone_circular_set)
    def get_allele_frequency(self, *args): return _hivpython.haploid_clone_get_allele_frequency(self, *args)
    def get_pair_frequency(self, *args): return _hivpython.haploid_clone_get_pair_frequency(self, *args)
    def get_fitness(self, *args): return _hivpython.haploid_clone_get_fitness(self, *args)
    def get_trait(self, *args): return _hivpython.haploid_clone_get_trait(self, *args)
    def __init__(self): 
        this = _hivpython.new_haploid_clone()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hivpython.delete_haploid_clone
    __del__ = lambda self : None;
haploid_clone_swigregister = _hivpython.haploid_clone_swigregister
haploid_clone_swigregister(haploid_clone)

HIVPOP_VERBOSE = _hivpython.HIVPOP_VERBOSE
HIVPOP_BADARG = _hivpython.HIVPOP_BADARG
NOTHING = _hivpython.NOTHING
HIVGENOME = _hivpython.HIVGENOME
class hivpython(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _hivpython.new_hivpython()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hivpython.delete_hivpython
    __del__ = lambda self : None;
    def set_up(self, *args): return _hivpython.hivpython_set_up(self, *args)
    def init_genotypes(self, *args): return _hivpython.hivpython_init_genotypes(self, *args)
    def get_generation(self): return _hivpython.hivpython_get_generation(self)
    def get_number_of_loci(self): return _hivpython.hivpython_get_number_of_loci(self)
    def get_pop_size(self): return _hivpython.hivpython_get_pop_size(self)
    def get_number_of_clones(self): return _hivpython.hivpython_get_number_of_clones(self)
    target_pop_size = _swig_property(_hivpython.hivpython_target_pop_size_get, _hivpython.hivpython_target_pop_size_set)
    mutation_rate = _swig_property(_hivpython.hivpython_mutation_rate_get, _hivpython.hivpython_mutation_rate_set)
    outcrossing_probability = _swig_property(_hivpython.hivpython_outcrossing_probability_get, _hivpython.hivpython_outcrossing_probability_set)
    crossover_rate = _swig_property(_hivpython.hivpython_crossover_rate_get, _hivpython.hivpython_crossover_rate_set)
    recombination_model = _swig_property(_hivpython.hivpython_recombination_model_get, _hivpython.hivpython_recombination_model_set)
    circular = _swig_property(_hivpython.hivpython_circular_get, _hivpython.hivpython_circular_set)
    def evolve(self, gen=1): return _hivpython.hivpython_evolve(self, gen)
    def bottleneck(self, *args): return _hivpython.hivpython_bottleneck(self, *args)
    def random_clone(self): return _hivpython.hivpython_random_clone(self)
    def get_genotype(self, *args): return _hivpython.hivpython_get_genotype(self, *args)
    def distance_Hamming(self, *args): return _hivpython.hivpython_distance_Hamming(self, *args)
    def get_diversity_statistics(self, n_sample=1000): return _hivpython.hivpython_get_diversity_statistics(self, n_sample)
    def get_divergence_statistics(self, n_sample=1000): return _hivpython.hivpython_get_divergence_statistics(self, n_sample)
    def get_fitness(self, *args): return _hivpython.hivpython_get_fitness(self, *args)
    def get_trait(self, *args): return _hivpython.hivpython_get_trait(self, *args)
    def _get_fitnesses(self, *args): return _hivpython.hivpython__get_fitnesses(self, *args)
    def get_allele_frequency(self, *args): return _hivpython.hivpython_get_allele_frequency(self, *args)
    def get_pair_frequency(self, *args): return _hivpython.hivpython_get_pair_frequency(self, *args)
    def get_allele_frequencies(self): return _hivpython.hivpython_get_allele_frequencies(self)
    def set_treatment(self, *args): return _hivpython.hivpython_set_treatment(self, *args)
    def get_treatment(self): return _hivpython.hivpython_get_treatment(self)
    def calc_fitness_from_traits(self, *args): return _hivpython.hivpython_calc_fitness_from_traits(self, *args)
    def read_selection_coefficients(self, *args): return _hivpython.hivpython_read_selection_coefficients(self, *args)
    def read_resistance_coefficients(self, *args): return _hivpython.hivpython_read_resistance_coefficients(self, *args)
    def get_fitnesses(self):
        return self._get_fitnesses(self.get_number_of_clones())

hivpython_swigregister = _hivpython.hivpython_swigregister
hivpython_swigregister(hivpython)



